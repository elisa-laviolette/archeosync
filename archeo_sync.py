# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ArcheoSync
                                 A QGIS plugin
 This plugin allows archaeologists to prepare data for the field and to import it back into the project
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-01
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Elisa Caron-Laviolette
        email                : elisa.laviolette@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from typing import List, Optional

from qgis.PyQt.QtCore import QSettings
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
from .ui.settings_dialog import SettingsDialog
from .ui.prepare_recording_dialog import PrepareRecordingDialog
from .ui.import_data_dialog import ImportDataDialog
from .ui.column_mapping_dialog import ColumnMappingDialog
from .services import (
    QGISSettingsManager,
    QGISFileSystemService,
    QGISTranslationService,
    ArcheoSyncConfigurationValidator,
    QGISLayerService,
    QGISQFieldService,
    CSVImportService
)


class ArcheoSyncPlugin:
    """
    ArcheoSync QGIS Plugin.
    
    This plugin provides functionality for archaeologists to prepare data for field work
    and import it back into the project. It follows clean architecture principles with
    dependency injection and separation of concerns.
    
    Key Features:
    - Field project preparation from templates
    - Total station data import from CSV files
    - Completed project import and processing
    - QField integration for mobile data collection
    - Recording areas layer selection from QGIS project
    
    Architecture:
    - Dependency Injection: All services are injected for testability
    - Interface Segregation: Services depend on interfaces, not concretions
    - Single Responsibility: Each class has a single, well-defined purpose
    - Clean Separation: UI, business logic, and data access are separated
    
    Usage:
        # Plugin is automatically initialized by QGIS
        # Access settings through the settings manager
        settings = plugin.settings_manager.get_value('field_projects_folder')
        
        # Access translation service
        translated_text = plugin.translation_service.translate('Hello World')
    """
    
    def __init__(self, iface):
        """
        Initialize the plugin.
        
        Args:
            iface: QGIS interface instance
        """
        self._iface = iface
        self._plugin_dir = os.path.dirname(__file__)
        
        # Initialize services using dependency injection
        self._initialize_services()
        
        # Plugin state
        self._actions: List[QAction] = []
        self._first_start = True
        self._settings_dialog: Optional[SettingsDialog] = None
        self._import_data_dialog: Optional[ImportDataDialog] = None
    
    def _initialize_services(self) -> None:
        """Initialize all required services."""
        # Initialize translation service
        self._translation_service = QGISTranslationService(
            self._plugin_dir, 
            'ArcheoSync'
        )
        
        # Initialize settings manager
        self._settings_manager = QGISSettingsManager('ArcheoSync')
        
        # Initialize file system service
        self._file_system_service = QGISFileSystemService(self._iface.mainWindow())
        
        # Initialize layer service
        self._layer_service = QGISLayerService()

        # Initialize QField service
        self._qfield_service = QGISQFieldService(self._settings_manager, self._layer_service)
        
        # Initialize CSV import service
        self._csv_import_service = CSVImportService(self._iface)
        
        # Initialize configuration validator
        self._configuration_validator = ArcheoSyncConfigurationValidator(
            self._file_system_service,
            self._layer_service
        )
    
    def tr(self, message: str) -> str:
        """
        Get the translation for a string.
        
        Args:
            message: String for translation
            
        Returns:
            Translated version of message
        """
        return self._translation_service.translate(message)
    
    def add_action(
        self,
        icon_path: str,
        text: str,
        callback: callable,
        enabled_flag: bool = True,
        add_to_menu: bool = True,
        add_to_toolbar: bool = True,
        status_tip: Optional[str] = None,
        whats_this: Optional[str] = None,
        parent=None
    ) -> QAction:
        """
        Add a toolbar icon to the toolbar.
        
        Args:
            icon_path: Path to the icon for this action
            text: Text that should be shown in menu items for this action
            callback: Function to be called when the action is triggered
            enabled_flag: A flag indicating if the action should be enabled by default
            add_to_menu: Flag indicating whether the action should also be added to the menu
            add_to_toolbar: Flag indicating whether the action should also be added to the toolbar
            status_tip: Optional text to show in a popup when mouse pointer hovers over the action
            whats_this: Optional text to show in the status bar when the action is triggered
            parent: Parent widget for the action
            
        Returns:
            The action that was created
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        
        if status_tip is not None:
            action.setStatusTip(status_tip)
        
        if whats_this is not None:
            action.setWhatsThis(whats_this)
        
        if add_to_toolbar:
            self._iface.addToolBarIcon(action)
        
        if add_to_menu:
            self._iface.addPluginToMenu(self.tr(u'&ArcheoSync'), action)
        
        self._actions.append(action)
        return action
    
    def initGui(self) -> None:
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/archeo_sync/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Configuration'),
            callback=self.run,
            parent=self._iface.mainWindow()
        )
        
        # Add Prepare Recording menu item
        self.add_action(
            icon_path,
            text=self.tr(u'Prepare Recording'),
            callback=self.run_prepare_recording,
            parent=self._iface.mainWindow()
        )
        
        # Add Import Data menu item
        self.add_action(
            icon_path,
            text=self.tr(u'Import Data'),
            callback=self.run_import_data,
            parent=self._iface.mainWindow()
        )
    
    def unload(self) -> None:
        """Remove the plugin menu item and icon from QGIS GUI."""
        for action in self._actions:
            self._iface.removePluginMenu(self.tr(u'&ArcheoSync'), action)
            self._iface.removeToolBarIcon(action)
    
    def run(self) -> None:
        """Run method that performs all the real work."""
        # Create the dialog only once
        if self._first_start:
            self._first_start = False
            self._settings_dialog = SettingsDialog(
                settings_manager=self._settings_manager,
                file_system_service=self._file_system_service,
                layer_service=self._layer_service,
                configuration_validator=self._configuration_validator,
                parent=self._iface.mainWindow()
            )
        
        # Show the dialog
        if self._settings_dialog:
            result = self._settings_dialog.exec_()
            
            # Handle dialog result
            if result:
                self._handle_settings_accepted()
    
    def _handle_settings_accepted(self) -> None:
        """Handle the case when settings dialog is accepted."""
        # This is where you would implement the actual plugin functionality
        # based on the saved settings
        pass
    
    def run_prepare_recording(self) -> None:
        """Run the prepare recording dialog."""
        # Create and show the prepare recording dialog
        dialog = PrepareRecordingDialog(
            layer_service=self._layer_service,
            settings_manager=self._settings_manager,
            qfield_service=self._qfield_service,
            parent=self._iface.mainWindow()
        )
        
        result = dialog.exec_()
        
        # Handle dialog result
        if result:
            self._handle_prepare_recording_accepted(dialog)
    
    def _handle_prepare_recording_accepted(self, dialog) -> None:
        """Handle the case when prepare recording dialog is accepted."""
        try:
            # Check if QField is enabled
            if not self._qfield_service.is_qfield_enabled():
                from qgis.PyQt.QtWidgets import QMessageBox
                QMessageBox.warning(
                    self._iface.mainWindow(),
                    "QField Not Enabled",
                    "QField integration is not enabled. Please enable it in the configuration."
                )
                return
            
            # Get configuration
            recording_areas_layer_id = self._settings_manager.get_value('recording_areas_layer', '')
            objects_layer_id = self._settings_manager.get_value('objects_layer', '')
            features_layer_id = self._settings_manager.get_value('features_layer', '')
            destination_folder = self._settings_manager.get_value('field_projects_folder', '')
            
            if not recording_areas_layer_id or not objects_layer_id or not destination_folder:
                from qgis.PyQt.QtWidgets import QMessageBox
                QMessageBox.warning(
                    self._iface.mainWindow(),
                    "Configuration Error",
                    "Required configuration is missing. Please check your settings."
                )
                return
            
            # Get selected features and extract their data early to avoid QGIS object deletion issues
            recording_layer = self._layer_service.get_layer_by_id(recording_areas_layer_id)
            if not recording_layer:
                from qgis.PyQt.QtWidgets import QMessageBox
                QMessageBox.warning(
                    self._iface.mainWindow(),
                    "Layer Error",
                    "Recording areas layer not found."
                )
                return
            
            selected_features = recording_layer.selectedFeatures()
            if not selected_features:
                from qgis.PyQt.QtWidgets import QMessageBox
                QMessageBox.warning(
                    self._iface.mainWindow(),
                    "No Selection",
                    "No recording areas are selected."
                )
                return
            
            # Extract feature data early to avoid issues with QGIS object deletion
            feature_data = []
            layer_display_expression = recording_layer.displayExpression()
            
            for feature in selected_features:
                # Extract geometry as WKT
                geometry_wkt = None
                if hasattr(feature, 'geometry') and feature.geometry():
                    geom = feature.geometry()
                    if geom and not geom.isNull():
                        geometry_wkt = geom.asWkt()
                
                # Extract attributes as a list to preserve order
                attributes = []
                if hasattr(feature, 'attributes'):
                    attributes = list(feature.attributes())
                
                # Extract feature ID
                feature_id = feature.id() if hasattr(feature, 'id') else None
                
                # Get display name using QGIS expression evaluation
                display_name = str(feature_id)  # Default to feature ID
                if layer_display_expression and layer_display_expression.strip():
                    try:
                        from qgis.core import QgsExpression, QgsExpressionContext, QgsExpressionContextUtils
                        expr = QgsExpression(layer_display_expression)
                        if not expr.hasParserError():
                            context = QgsExpressionContext()
                            context.appendScope(QgsExpressionContextUtils.layerScope(recording_layer))
                            context.setFeature(feature)
                            result = expr.evaluate(context)
                            if result and str(result) != 'NULL' and str(result).strip():
                                display_name = str(result).strip()
                                print(f"Using display expression for feature {feature_id}: '{display_name}'")
                    except Exception as e:
                        print(f"Display expression evaluation failed for feature {feature_id}: {str(e)}")
                        # Fall back to common name fields
                        name_fields = ['name', 'title', 'label', 'description', 'comment']
                        for field_name in name_fields:
                            field_idx = recording_layer.fields().indexOf(field_name)
                            if field_idx >= 0 and field_idx < len(attributes):
                                value = attributes[field_idx]
                                if value and str(value) != 'NULL':
                                    display_name = str(value)
                                    print(f"Using common name field '{field_name}' for feature {feature_id}: '{display_name}'")
                                    break
                
                feature_data.append({
                    'id': feature_id,
                    'geometry_wkt': geometry_wkt,
                    'attributes': attributes,
                    'display_name': display_name
                })
            
            # Get next values for all features
            next_values = dialog.get_all_next_values()
            
            # Display expression information for debugging
            if layer_display_expression and layer_display_expression.strip():
                print(f"Display expression: '{layer_display_expression}'")
            
            # Process each selected recording area
            success_count = 0
            error_count = 0
            
            for i, feature_info in enumerate(feature_data):
                try:
                    # Use the pre-extracted display name
                    feature_name = feature_info['display_name']
                    
                    # Clean project name for file system
                    import re
                    project_name = re.sub(r'[^\w\-_\.]', '_', feature_name)
                    
                    # Get background image from next values
                    background_layer_id = next_values[i]['background_image'] if i < len(next_values) else ''
                    
                    # Package for QField using extracted feature data to avoid QGIS object deletion issues
                    # Use the new method that adds project variables
                    success = self._qfield_service.package_for_qfield_with_data_and_variables(
                        feature_data=feature_info,
                        recording_areas_layer_id=recording_areas_layer_id,
                        objects_layer_id=objects_layer_id,
                        features_layer_id=features_layer_id if features_layer_id else None,
                        background_layer_id=background_layer_id if background_layer_id else None,
                        destination_folder=destination_folder,
                        project_name=project_name,
                        next_values=next_values[i] if i < len(next_values) else {}
                    )
                    
                    if success:
                        success_count += 1
                    else:
                        error_count += 1
                        
                except Exception as e:
                    feature_id = feature_info.get('id', 'unknown')
                    print(f"Error processing recording area {feature_id}: {str(e)}")
                    error_count += 1
            
            # Show results
            from qgis.PyQt.QtWidgets import QMessageBox
            if error_count == 0:
                QMessageBox.information(
                    self._iface.mainWindow(),
                    "QField Preparation Complete",
                    f"Successfully prepared {success_count} QField project(s) in:\n{destination_folder}"
                )
            else:
                QMessageBox.warning(
                    self._iface.mainWindow(),
                    "QField Preparation Results",
                    f"Prepared {success_count} QField project(s) successfully.\n{error_count} project(s) failed.\n\nCheck the console for error details."
                )
                
        except Exception as e:
            from qgis.PyQt.QtWidgets import QMessageBox
            QMessageBox.critical(
                self._iface.mainWindow(),
                "Error",
                f"An error occurred during QField preparation:\n{str(e)}"
            )
    
    def run_import_data(self) -> None:
        """Run the import data dialog."""
        # Create and show the import data dialog
        dialog = ImportDataDialog(
            settings_manager=self._settings_manager,
            file_system_service=self._file_system_service,
            parent=self._iface.mainWindow()
        )
        
        result = dialog.exec_()
        
        # Handle dialog result
        if result:
            self._handle_import_data_accepted(dialog)
    
    def _handle_import_data_accepted(self, dialog) -> None:
        """Handle the case when import data dialog is accepted."""
        try:
            # Get selected items
            selected_csv_files = dialog.get_selected_csv_files()
            selected_completed_projects = dialog.get_selected_completed_projects()
            
            from qgis.PyQt.QtWidgets import QMessageBox
            
            # Process CSV files if any are selected
            if selected_csv_files:
                self._process_csv_files(selected_csv_files)
            
            # Process completed projects if any are selected
            if selected_completed_projects:
                self._process_completed_projects(selected_completed_projects)
            
        except Exception as e:
            from qgis.PyQt.QtWidgets import QMessageBox
            QMessageBox.critical(
                self._iface.mainWindow(),
                "Error",
                f"An error occurred during import data processing:\n{str(e)}"
            )
    
    def _process_csv_files(self, csv_files: List[str]) -> None:
        """Process CSV files for import."""
        from qgis.PyQt.QtWidgets import QMessageBox
        
        # Validate CSV files
        validation_result = self._csv_import_service.validate_csv_files(csv_files)
        if not validation_result.is_valid:
            QMessageBox.critical(
                self._iface.mainWindow(),
                "CSV Validation Error",
                validation_result.message
            )
            return
        
        # Get column mapping and all headers
        column_mapping, file_columns = self._csv_import_service.get_column_mapping_and_headers(csv_files)
        
        # Check if columns differ across files
        columns_differ = False
        for column_name, column_list in column_mapping.items():
            if len(set(column_list)) > 1:  # More than one unique column name
                columns_differ = True
                break
        
        # If columns differ, show column mapping dialog
        if columns_differ:
            mapping_dialog = ColumnMappingDialog(
                column_mapping=column_mapping,
                csv_files=csv_files,
                file_columns=file_columns,
                parent=self._iface.mainWindow()
            )
            
            if mapping_dialog.exec_() != mapping_dialog.Accepted:
                return  # User cancelled
            
            # Get final mapping from dialog
            column_mapping = mapping_dialog.get_final_mapping()
        
        # Import CSV files
        import_result = self._csv_import_service.import_csv_files(csv_files, column_mapping)
        
        if import_result.is_valid:
            QMessageBox.information(
                self._iface.mainWindow(),
                "CSV Import Complete",
                import_result.message
            )
        else:
            QMessageBox.critical(
                self._iface.mainWindow(),
                "CSV Import Error",
                import_result.message
            )
    
    def _process_completed_projects(self, project_paths: List[str]) -> None:
        """Process completed QField projects for import."""
        from qgis.PyQt.QtWidgets import QMessageBox
        
        # Import QField projects using the QField service
        import_result = self._qfield_service.import_qfield_projects(project_paths)
        
        if import_result.is_valid:
            QMessageBox.information(
                self._iface.mainWindow(),
                "QField Project Import Complete",
                import_result.message
            )
        else:
            QMessageBox.critical(
                self._iface.mainWindow(),
                "QField Project Import Error",
                import_result.message
            )
    
    @property
    def settings_manager(self):
        """Get the settings manager instance."""
        return self._settings_manager
    
    @property
    def translation_service(self):
        """Get the translation service instance."""
        return self._translation_service
    
    @property
    def layer_service(self):
        """Get the layer service instance."""
        return self._layer_service
    
    @property
    def qfield_service(self):
        """Get the QField service instance."""
        return self._qfield_service
    
    @property
    def csv_import_service(self):
        """Get the CSV import service instance."""
        return self._csv_import_service 