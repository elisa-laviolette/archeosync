# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ArcheoSync
                                 A QGIS plugin
 This plugin allows archaeologists to prepare data for the field and to import it back into the project
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-01
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Elisa Caron-Laviolette
        email                : elisa.laviolette@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from typing import List, Optional

from qgis.PyQt.QtCore import QSettings
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
from .ui.settings_dialog import SettingsDialog
from .services import (
    QGISSettingsManager,
    QGISFileSystemService,
    QGISTranslationService,
    ArcheoSyncConfigurationValidator
)


class ArcheoSyncPlugin:
    """
    Main plugin class for ArcheoSync.
    
    This class follows the Single Responsibility Principle by focusing only on
    plugin lifecycle management and delegating specific responsibilities to
    specialized services. The plugin demonstrates clean architecture principles
    through dependency injection and interface-based design.
    
    Key Features:
    - Dependency Injection: All services are injected through the constructor
    - Interface Segregation: Dependencies on specific interfaces, not concrete classes
    - Single Responsibility: Plugin class focuses only on QGIS integration
    - Open/Closed: Easy to extend with new services without modifying existing code
    - Liskov Substitution: Any implementation of an interface can be used
    
    Architecture:
        ArcheoSyncPlugin
        ├── ISettingsManager (injected)
        ├── IFileSystemService (injected)
        ├── ITranslationService (injected)
        └── IConfigurationValidator (injected)
    
    Usage:
        # Plugin is automatically instantiated by QGIS
        plugin = ArcheoSyncPlugin(iface)
        
        # Plugin handles QGIS integration automatically
        plugin.initGui()  # Sets up UI
        plugin.run()      # Executes main functionality
        plugin.unload()   # Cleanup
    
    This design allows for:
    - Easy unit testing with mock services
    - Platform-specific service implementations
    - Future extensions without code changes
    - Clear separation of QGIS-specific and business logic
    """
    
    def __init__(self, iface):
        """
        Initialize the plugin.
        
        Args:
            iface: QGIS interface instance
        """
        self._iface = iface
        self._plugin_dir = os.path.dirname(__file__)
        
        # Initialize services using dependency injection
        self._initialize_services()
        
        # Plugin state
        self._actions: List[QAction] = []
        self._first_start = True
        self._settings_dialog: Optional[SettingsDialog] = None
    
    def _initialize_services(self) -> None:
        """Initialize all required services."""
        # Initialize translation service
        self._translation_service = QGISTranslationService(
            self._plugin_dir, 
            'ArcheoSync'
        )
        
        # Initialize settings manager
        self._settings_manager = QGISSettingsManager('ArcheoSync')
        
        # Initialize file system service
        self._file_system_service = QGISFileSystemService(self._iface.mainWindow())
        
        # Initialize configuration validator
        self._configuration_validator = ArcheoSyncConfigurationValidator(
            self._file_system_service
        )
    
    def tr(self, message: str) -> str:
        """
        Get the translation for a string.
        
        Args:
            message: String for translation
            
        Returns:
            Translated version of message
        """
        return self._translation_service.translate(message)
    
    def add_action(self, icon_path: str, text: str, callback: callable,
                   enabled_flag: bool = True, add_to_menu: bool = True,
                   add_to_toolbar: bool = True, status_tip: Optional[str] = None,
                   whats_this: Optional[str] = None, parent=None) -> QAction:
        """
        Add a toolbar icon to the toolbar.
        
        Args:
            icon_path: Path to the icon for this action
            text: Text that should be shown in menu items for this action
            callback: Function to be called when the action is triggered
            enabled_flag: A flag indicating if the action should be enabled by default
            add_to_menu: Flag indicating whether the action should also be added to the menu
            add_to_toolbar: Flag indicating whether the action should also be added to the toolbar
            status_tip: Optional text to show in a popup when mouse pointer hovers over the action
            whats_this: Optional text to show in the status bar when the mouse pointer hovers over the action
            parent: Parent widget for the new action
            
        Returns:
            The action that was created
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        
        if status_tip is not None:
            action.setStatusTip(status_tip)
        
        if whats_this is not None:
            action.setWhatsThis(whats_this)
        
        if add_to_toolbar:
            self._iface.addToolBarIcon(action)
        
        if add_to_menu:
            self._iface.addPluginToMenu(self.tr(u'&ArcheoSync'), action)
        
        self._actions.append(action)
        return action
    
    def initGui(self) -> None:
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/archeo_sync/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Prepare field recording'),
            callback=self.run,
            parent=self._iface.mainWindow()
        )
    
    def unload(self) -> None:
        """Remove the plugin menu item and icon from QGIS GUI."""
        for action in self._actions:
            self._iface.removePluginMenu(self.tr(u'&ArcheoSync'), action)
            self._iface.removeToolBarIcon(action)
    
    def run(self) -> None:
        """Run method that performs all the real work."""
        # Create the dialog only once
        if self._first_start:
            self._first_start = False
            self._settings_dialog = SettingsDialog(
                settings_manager=self._settings_manager,
                file_system_service=self._file_system_service,
                configuration_validator=self._configuration_validator,
                parent=self._iface.mainWindow()
            )
        
        # Show the dialog
        if self._settings_dialog:
            result = self._settings_dialog.exec_()
            
            # Handle dialog result
            if result:
                self._handle_settings_accepted()
    
    def _handle_settings_accepted(self) -> None:
        """Handle the case when settings dialog is accepted."""
        # This is where you would implement the actual plugin functionality
        # based on the saved settings
        pass
    
    @property
    def settings_manager(self):
        """Get the settings manager instance."""
        return self._settings_manager
    
    @property
    def translation_service(self):
        """Get the translation service instance."""
        return self._translation_service
    
    @property
    def file_system_service(self):
        """Get the file system service instance."""
        return self._file_system_service
    
    @property
    def configuration_validator(self):
        """Get the configuration validator instance."""
        return self._configuration_validator 